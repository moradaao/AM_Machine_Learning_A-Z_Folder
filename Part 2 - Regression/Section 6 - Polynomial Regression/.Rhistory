unique(hw$GENE_VAR)
ggplot(data = hw, aes(x = TYPE_VAR, y = BMI_NUM)) +
geom_boxplot() +
facet_grid(GENE_VAR~.)
ggplot(data = hw, aes(x = TYPE_VAR, y = BMI_NUM)) +
geom_boxplot() +
facet_grid(GENE_VAR~.)
ggplot(data = hw, aes(x = TYPE_VAR, y = BMI_NUM)) +
geom_boxplot() +
facet_grid(.~GENE_VAR)
ggplot(data = hw, aes(x = GENE_VAR, y = BMI_NUM)) +
geom_boxplot() +
ggplot(data = hw, aes(x = GENE_VAR, y = BMI_NUM)) +
geom_boxplot()
ggplot(data = hw, aes(x = GENE_VAR, y = BMI_NUM)) +
geom_boxplot(fill = TYPE_VAR)
hw$TYPE_VAR
ggplot(data = hw, aes(x = GENE_VAR, y = BMI_NUM)) +
geom_boxplot(fill = hw$TYPE_VAR)
ggplot(data = hw, aes(x = GENE_VAR, y = BMI_NUM)) +
geom_boxplot()
ggplot(data = hw, aes(x = GENE_VAR, y = BMI_NUM)) +
geom_boxplot(aes(fill=hw$TYPE_VAR))
ggplot(data = hw, aes(x = GENE_VAR, y = BMI_NUM)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = hw, aes(x = reorder(GENE_VAR, TYPE_VAR), y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
unique(TYPE_VAR)
unique(hw$TYPE_VAR)
unique(hw$TYPE_VAR)
hw$TYPE_VAR
typeof(hw$TYPE_VAR)
factor(hw$TYPE_VAR)
ggplot(data = hw, aes(x = reorder(GENE_VAR, factor(hw$TYPE_VAR)), y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
factor(hw$TYPE_VAR)
head(factor(hw$TYPE_VAR))
head(factor(hw$TYPE_VAR))
?factor
head(factor(hw$TYPE_VAR))
head(factor(hw$TYPE_VAR)$label)
head(factor(hw$TYPE_VAR))
hw$TYPE_VAR = factor(hw$TYPE_VAR)
hw$TYPE_VAR
summary(hw$TYPE_VAR)
order(hw$TYPE_VAR)
ggplot(data = hw, aes(x = reorder(GENE_VAR, TYPE_VAR), y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
head(hw$TYPE_VAR)
hw$TYPE_VAR = factor(hw$TYPE_VAR,)
hw$TYPE_VAR = factor(hw$TYPE_VAR,)
hw$TYPE_VAR = factor(hw$TYPE_VAR,
levels = c('MISSENSE', 'NC', 'PLOF'),
labels = c(1,2,3))
hw$TYPE_VAR
hw = readWorksheetFromFile("FZ90K_FGFR3_plof_G380R_demo.xlsx", sheet = 1)
icd = readWorksheetFromFile("FZ90K_FGFR3_plof_G380R_specific_icds.xlsx", sheet = 1)
#height/weight table
hw$PT_SEX[hw$PT_SEX == "Unknown"] = NA
hw$PT_SEX[hw$PT_SEX == "Female"] = "FEMALE"
hw$PT_SEX[hw$PT_SEX == "Male"] = "MALE"
hw$TYPE_VAR = factor(hw$TYPE_VAR,
levels = c(1,2,3),
labels = c('MISSENSE', 'NC', 'PLOF'))
hw$TYPE_VAR
hw = readWorksheetFromFile("FZ90K_FGFR3_plof_G380R_demo.xlsx", sheet = 1)
icd = readWorksheetFromFile("FZ90K_FGFR3_plof_G380R_specific_icds.xlsx", sheet = 1)
ggplot(data = hw, aes(x = GENE_VAR, y = VTL_AGE)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
geom_text(position = position_dodge(width = 1), aes(x=TYPE_VAR, y=0)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
geom_text(position = position_dodge(width = 1), aes(x=TYPE_VAR, y=0)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(position = position_dodge(width = 1), aes(x=TYPE_VAR, y=0))
?theme
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
geom_text(position = position_dodge(width = 1), aes(hw$TYPE_VAR, y=0))
?geom_text()
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
geom_text(position = position_dodge(width = 1), aes(lable=TYPE_VAR, y=0))
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
geom_text(position = position_dodge(width = 1), aes(label=TYPE_VAR, y=0))
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
geom_text(position = position_dodge(width = 1), aes(label=TYPE_VAR, y=0)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap( ~TYPE_VAR, strip.position = "bottom", scales = "free_x") +
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap( ~TYPE_VAR, strip.position = "bottom", scales = "free_x") +
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap( ~TYPE_VAR, strip.position = "bottom", scales = "free_x")
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(.~TYPE_VAR, strip.position = "bottom", scales = "free_x")
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR, strip.position = "bottom", scales = "free_x")
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR, strip.position = "bottom", scales = "free_x")
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR)
?facet_wrape
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR, strip.position = "bottom", scales = "free")
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR, strip.position = "bottom", scales = "free_x")
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR, strip.position = "bottom", scales = "free_y")
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_dotplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = hw, aes(x = HET.1.HOM.2, y = HEIGHT)) +
geom_boxplot() +
facet_grid(.~PT_SEX)
ggplot(data = hw, aes(x = TYPE_VAR, y = HEIGHT)) +
geom_boxplot() +
facet_grid(.~PT_SEX)
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = hw, aes(x = HET.1.HOM.2, y = HEIGHT)) +
geom_boxplot() +
facet_grid(.~PT_SEX)
ggplot(data = hw, aes(x = TYPE_VAR, y = HEIGHT)) +
geom_boxplot() +
facet_grid(.~PT_SEX)
ggplot(data = hw, aes(x = GENE_VAR, y = HEIGHT)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = hw, aes(x = GENE_VAR, y = VTL_AGE)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
hw = readWorksheetFromFile("FZ90K_FGFR3_plof_G380R_demo.xlsx", sheet = 1)
options(java.parameters = "- Xmx1024m")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/Carey_Research")
library(XLConnect)
library(ggplot2)
hw = readWorksheetFromFile("FZ90K_FGFR3_plof_G380R_demo.xlsx", sheet = 1)
icd = readWorksheetFromFile("FZ90K_FGFR3_plof_G380R_specific_icds.xlsx", sheet = 1)
#height/weight table
hw$PT_SEX[hw$PT_SEX == "Unknown"] = NA
hw$PT_SEX[hw$PT_SEX == "Female"] = "FEMALE"
hw$PT_SEX[hw$PT_SEX == "Male"] = "MALE"
ggplot(data = hw, aes(x = HET.1.HOM.2, y = VTL_AGE)) +
geom_boxplot() +
facet_grid(.~PT_SEX)
ggplot(data = hw, aes(x = GENE_VAR, y = VTL_AGE)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR, strip.position = "bottom", scales = "free_x") +
ggplot(data = hw, aes(x = GENE_VAR, y = VTL_AGE)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR, strip.position = "bottom", scales = "free_x") +
ggplot(data = hw, aes(x = GENE_VAR, y = VTL_AGE)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR, strip.position = "bottom", scales = "free_x")
ggplot(data = hw, aes(x = GENE_VAR, y = VTL_AGE)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR, strip.position = "bottom", scales = "free_x")
ggplot(data = hw, aes(x = GENE_VAR, y = VTL_AGE)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = hw, aes(x = GENE_VAR, y = VTL_AGE)) +
geom_boxplot(aes(fill=hw$TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR)
ggplot(data = hw, aes(x = GENE_VAR, y = VTL_AGE)) +
geom_boxplot(aes(fill=TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR)
ggplot(data = hw, aes(x = GENE_VAR, y = VTL_AGE)) +
geom_boxplot(aes(fill=TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR, strip.position="bottom", scales = "free x")
ggplot(data = hw, aes(x = GENE_VAR, y = VTL_AGE)) +
geom_boxplot(aes(fill=TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~TYPE_VAR, strip.position="bottom", scales = "free_x")
ggplot(ICD_10_CD_NM)
ggplot(data=hw,ICD_10_CD_NM)
ggplot(data=icd,ICD_10_CD_NM)
ggplot(data=icd,icd$ICD_10_CD_NM)
ggplot(data=icd, aes(x=ICD_10_CD_NM))
icd$ICD_10_CD_NM
summary(icd$ICD_10_CD_NM)
ggplot(data=icd, aes(x=as.factorICD_10_CD_NM)))
ggplot(data=icd, aes(x=as.factor(ICD_10_CD_NM)))
summary(as.factor(icd$ICD_10_CD_NM))
icd[,is.na(icd$ICD_10_CD_NM) == F]
icd[is.na(icd$ICD_10_CD_NM) == F,]
nrow(icd[is.na(icd$ICD_10_CD_NM) == F,])
icd = icd[is.na(icd$ICD_10_CD_NM)==F,]
ggplot(data=icd, aes(x=as.factor(ICD_10_CD_NM)))
icd$ICD_10_CD_NM = as.factor(icd$ICD_10_CD_NM)
icd = icd[is.na(icd$ICD_10_CD_NM)==F,]
icd$ICD_10_CD_NM = as.factor(icd$ICD_10_CD_NM)
ggplot(data=icd, aes(x=ICD_10_CD_NM)
ggplot(data=icd, aes(x=ICD_10_CD_NM))
summary(icd$ICD_10_CD_NM)
ggplot(data=icd, aes(x=ICD_10_CD_NM)) +
geom_bar
ggplot(data=icd, aes(x=ICD_10_CD_NM)) +
geom_bar()
icd = icd[is.na(icd$ICD_10_CD_NM)==F,]
icd$ICD_10_CD_NM = as.factor(icd$ICD_10_CD_NM)
ggplot(data=icd, aes(x=ICD_10_CD_NM)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar()
icd = icd[is.na(icd$ICD_10_CD_NM)==F,]
icd$ICD_10_CD_NM = as.factor(icd$ICD_10_CD_NM)
ggplot(data=icd, aes(x=ICD_10_CD_NM)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar()
icd = icd[is.na(icd$ICD_10_CD_NM)==F,]
icd$ICD_10_CD_NM = as.factor(icd$ICD_10_CD_NM)
ggplot(data=icd, aes(x=ICD_10_CD_NM, fill=TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar()
ggplot(data=icd, aes(x=ICD_10_CD_NM, fill=TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar(position="stack")
ggplot(data=icd, aes(x=ICD_10_CD_NM, fill=TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar(position="fill")
icd = icd[is.na(icd$ICD_10_CD_NM)==F,]
icd$ICD_10_CD_NM = as.factor(icd$ICD_10_CD_NM)
ggplot(data=icd, aes(x=ICD_10_CD_NM, fill=TYPE_VAR)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar(position="stack")
#icd table
icd = icd[is.na(icd$ICD_10_CD_NM)==F,]
head(icd$ICD_10_CD)
substr(icd$ICD_10_CD, start = 1, stop = 2)
substr(icd$ICD_10_CD, start = 1, stop = 3)
#height/weight table
hw$PT_SEX[hw$PT_SEX == "Unknown"] = NA
hw$PT_SEX[hw$PT_SEX == "Female"] = "FEMALE"
hw$PT_SEX[hw$PT_SEX == "Male"] = "MALE"
#icd table
icd = icd[is.na(icd$ICD_10_CD_NM)==F,]
icd$ICD_10_CD_NM = as.factor(icd$ICD_10_CD_NM)
icd$ICD_SIMP = substr(icd$ICD_10_CD, start = 1, stop = 3)
View(icd)
setwd("~/GitHub/AM_Machine_Learning_A-Z_Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression")
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Importing the dataset
dataset = read.csv('50_Startups.csv')
View(dataset)
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
View(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Profit ~ .,
data = training_set)
summary(regressor)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
View(test_set)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
regressor
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
regressor
regressor
regressor$model
regressor$coefficients
regressor$qr
regressor$xlevels
regressor$terms
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
setwd("~/GitHub/AM_Machine_Learning_A-Z_Folder/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
dataset = read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
dataset = dataset[2:3]
dataset = read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
dataset = dataset[2:3]
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg
)
dataset$Level
dataset$Level
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
dataset
poly_reg = lm(formula = Salary ~ .,
data = dataset)
poly_reg
summary(poly_reg)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
predict(lin_reg, data.frame(Level = 6.5))
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4)
